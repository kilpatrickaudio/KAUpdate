package com.kilpatrickaudio.kaUpdate.main;

import java.io.File;
import java.util.Iterator;
import java.util.LinkedList;

import javax.sound.midi.MidiUnavailableException;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

import org.apache.log4j.Logger;

import com.kilpatrickaudio.kaUpdate.midi.MIDIHandler;


/**
 * This class implements the GUI for KAUpdate.
 *
 * @author andrew
 */
@SuppressWarnings("serial")
public class KAUpdateGUI extends javax.swing.JFrame implements ProgressIndicator {
    MIDIHandler midiHandler;
    Logger logger;
    UpdateTextAppender updateTextAppender;
    JFileChooser fileChooser;
    UpdateControlHandler uch;
    String windowTitle = "Kilpatrick Audio - KAUpdate ver.";
    // dynamic labels
    String updateFileMIDILabelString = "Update HEX File";
    String updateFileDFULabelString = "Update DFU File";
    public enum UpdateMode {
    	MIDI,
    	DFU;
    }
    UpdateMode updateMode = UpdateMode.MIDI;
    
    /**
     * Creates a new KAUpdate GUI.
     * 
     * @param uch the UpdateControlHandler that will perform update operations
     * @param midiHandler the MIDI handler - used for detecting the MIDI ports
     */
    public KAUpdateGUI(UpdateControlHandler uch, MIDIHandler midiHandler, String versionString) {
        logger = Logger.getLogger(this.getClass());
        this.uch = uch;
        this.midiHandler = midiHandler;
        initComponents();
        updateTextAppender = new UpdateTextAppender(this);
        Logger.getRootLogger().addAppender(updateTextAppender);
        logger.info("KAUpdateGUI started up...");
        fileChooser = new JFileChooser();
        updateProgressBar.setMinimum(0);
        updateProgressBar.setMaximum(100);
        updateProgressBar.setStringPainted(true);
        updateHexFileLabel.setText(updateFileMIDILabelString);
        this.setTitle(windowTitle + versionString);
    }
    
    /**
     * Displays a debug message in the update text area.
     * 
     * @param string the String to display
     */
    void debug(String string) {
        updateTextArea.append(string);
        updateTextArea.setCaretPosition(updateTextArea.getDocument().getLength());
    }
    
    /**
     * Generates a list of available MIDI input ports for the combo box.
     * 
     * @return a ComboBoxModel containing the list of available MIDI input ports
     */
    private ComboBoxModel getMIDIInputsComboBoxModel() {
        DefaultComboBoxModel combo = new DefaultComboBoxModel(); 
        LinkedList<String> inputs = null;
		try {
			inputs = MIDIHandler.getInputDeviceNames();
		} catch (MidiUnavailableException e) {
			logger.error(e.getMessage());
		}
        Iterator<String> iter = inputs.iterator();
        while(iter.hasNext()) {
            String input = iter.next();
            combo.addElement(input);
        }
        return combo;
    }
    
    /**
     * Generates a list of available MIDI output ports for the combo box.
     * 
     * @return a ComboBoxModel containing the list of available MIDI output ports
     */
    private ComboBoxModel getMIDIOutputsComboBoxModel() {
        DefaultComboBoxModel combo = new DefaultComboBoxModel();
        LinkedList<String> outputs = null;
		try {
			outputs = MIDIHandler.getOutputDeviceNames();
		} catch (MidiUnavailableException e) {
			logger.error(e.getMessage());
		}
        Iterator<String> iter = outputs.iterator();
        while(iter.hasNext()) {
            String output = iter.next();
            combo.addElement(output);
        }        
        return combo;
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateModeButtonGroup = new javax.swing.ButtonGroup();
        midiInLabel = new javax.swing.JLabel();
        midiOutLabel = new javax.swing.JLabel();
        midiInComboBox = new javax.swing.JComboBox();
        midiOutComboBox = new javax.swing.JComboBox();
        updateFilenameTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        updateHexFileLabel = new javax.swing.JLabel();
        updateProgressLabel = new javax.swing.JLabel();
        updateProgressBar = new javax.swing.JProgressBar();
        updateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        updateTextArea = new javax.swing.JTextArea();
        updateMessagesLabel = new javax.swing.JLabel();
        midiUpdateModeButton = new javax.swing.JRadioButton();
        dfuUpdateModeButton = new javax.swing.JRadioButton();
        updateTypeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Kilpatrick Audio - KAUpdate");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        midiInLabel.setText("MIDI IN Port");

        midiOutLabel.setText("MIDI OUT Port");

        midiInComboBox.setModel(getMIDIInputsComboBoxModel());

        midiOutComboBox.setModel(getMIDIOutputsComboBoxModel());

        updateFilenameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFilenameTextFieldActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        updateHexFileLabel.setText("Update HEX File");

        updateProgressLabel.setText("Update Progress");

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        updateTextArea.setEditable(false);
        updateTextArea.setColumns(20);
        updateTextArea.setRows(10);
        updateTextArea.setFocusable(false);
        jScrollPane1.setViewportView(updateTextArea);

        updateMessagesLabel.setText("Update Messages");

        updateModeButtonGroup.add(midiUpdateModeButton);
        midiUpdateModeButton.setSelected(true);
        midiUpdateModeButton.setText("MIDI Update");
        midiUpdateModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midiUpdateModeButtonActionPerformed(evt);
            }
        });

        updateModeButtonGroup.add(dfuUpdateModeButton);
        dfuUpdateModeButton.setText("DFU Update");
        dfuUpdateModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfuUpdateModeButtonActionPerformed(evt);
            }
        });

        updateTypeLabel.setText("Update Type");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addComponent(updateMessagesLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(midiInLabel)
                            .addComponent(midiOutLabel)
                            .addComponent(updateHexFileLabel)
                            .addComponent(updateProgressLabel)
                            .addComponent(updateTypeLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(midiUpdateModeButton)
                                .addGap(18, 18, 18)
                                .addComponent(dfuUpdateModeButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(midiInComboBox, 0, 370, Short.MAX_VALUE)
                                    .addComponent(midiOutComboBox, 0, 370, Short.MAX_VALUE)
                                    .addComponent(updateFilenameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                                    .addComponent(updateProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(browseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateTypeLabel)
                    .addComponent(midiUpdateModeButton)
                    .addComponent(dfuUpdateModeButton))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(midiInLabel)
                    .addComponent(midiInComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(midiOutLabel)
                    .addComponent(midiOutComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseButton)
                            .addComponent(updateHexFileLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateProgressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
                    .addComponent(updateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(updateMessagesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the browse button by popping up a dialog and allowing the user to choose an update file.
     * 
     * @param evt the event
     */
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int returnVal = fileChooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            setUpdateFilename(file.getAbsolutePath());
        }
    }

    /**
     * Handles the update button being pressed.
     * 
     * @param evt the event
     */
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	if(updateMode == UpdateMode.MIDI) {
        	uch.performMIDIUpdate((String)midiInComboBox.getSelectedItem(), (String)midiOutComboBox.getSelectedItem(), updateFilenameTextField.getText());
    	}
    	if(updateMode == UpdateMode.DFU) {
    		uch.performDfuUpdate(updateFilenameTextField.getText());
    	}
    }

    /**
     * Handles a change in the hex filename text field.
     * 
     * @param evt the event
     */
    private void updateFilenameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // unused
    }

    /**
     * Handles the MIDI update mode button being selected.
     * 
     * @param evt the event
     */
    private void midiUpdateModeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        setUpdateMode(UpdateMode.MIDI);
    }

    /**
     * Handles the DFU update mode button being selected.
     * 
     * @param evt the event
     */
    private void dfuUpdateModeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        setUpdateMode(UpdateMode.DFU);
    }

    /**
     * Handles the form window being closed.
     * 
     * @param evt the event
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
    	uch.closeApplication();
    }

    /**
     * Sets the percent completion of the progress bar.
     * 
     * @param completed the percentage
     */
    public void setPercentComplete(int completed) {
    	updateProgressBar.setValue(completed);
    }

    /**
     * Enables or disables the controls.
     * 
     * @param enabled true if the controls should be enabled, false otherwise
     */
    public void setControlsEnabled(boolean enabled) {
		browseButton.setEnabled(enabled);
		updateFilenameTextField.setEditable(enabled);
		if(updateMode == UpdateMode.MIDI) {
			midiInComboBox.setEnabled(enabled);
			midiOutComboBox.setEnabled(enabled);			
		}
		else {
			// make sure MIDI is disabled
			midiInComboBox.setEnabled(false);
			midiOutComboBox.setEnabled(false);			
		}
		updateButton.setEnabled(enabled);
		dfuUpdateModeButton.setEnabled(enabled);
		midiUpdateModeButton.setEnabled(enabled);
    }
    
    /**
     * Sets the update mode type.
     * 
     * @param mode the update mode
     */
    public void setUpdateMode(UpdateMode mode) {
    	switch(mode) {
		case DFU:
	        logger.debug("DFU update mode selected");
	        updateMode = UpdateMode.DFU;
			midiInComboBox.setEnabled(false);
			midiOutComboBox.setEnabled(false);
			dfuUpdateModeButton.setSelected(true);
	        updateHexFileLabel.setText(updateFileDFULabelString);
			break;
		case MIDI:
	        logger.debug("MIDI update mode selected");
	        updateMode = UpdateMode.MIDI;
			midiInComboBox.setEnabled(true);
			midiOutComboBox.setEnabled(true);
			midiUpdateModeButton.setSelected(true);
	        updateHexFileLabel.setText(updateFileMIDILabelString);
			break;
		default:
			break;    	
    	}
    }
    
    public void setMidiInPort(String midiInPortName) {
    	ComboBoxModel comboBox = getMIDIInputsComboBoxModel();
    	for(int i = 0; i < comboBox.getSize(); i ++){
    		String portName = (String)comboBox.getElementAt(i);
    		logger.debug("port: " + portName);
    		if(portName.equals(midiInPortName)) {
    			midiInComboBox.setSelectedIndex(i);
    			return;
    		}
    	}
    	throw new IllegalArgumentException("MIDI IN port not found: " + midiInPortName);
    }
    
    public void setMidiOutPort(String midiOutPortName) {
    	ComboBoxModel comboBox = getMIDIOutputsComboBoxModel();
    	for(int i = 0; i < comboBox.getSize(); i ++){
    		String portName = (String)comboBox.getElementAt(i);
    		logger.debug("port: " + portName);
    		if(portName.equals(midiOutPortName)) {
    			midiOutComboBox.setSelectedIndex(i);
    			return;
    		}
    	}
    	throw new IllegalArgumentException("MIDI OUT port not found: " + midiOutPortName);
    }
    
    /**
     * Sets the update filename to use.
     * 
     * @param filename
     */
    public void setUpdateFilename(String filename) {
        updateFilenameTextField.setText(filename);
        logger.info("update file selected: " + filename);    	
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JRadioButton dfuUpdateModeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox midiInComboBox;
    private javax.swing.JLabel midiInLabel;
    private javax.swing.JComboBox midiOutComboBox;
    private javax.swing.JLabel midiOutLabel;
    private javax.swing.JRadioButton midiUpdateModeButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField updateFilenameTextField;
    private javax.swing.JLabel updateHexFileLabel;
    private javax.swing.JLabel updateMessagesLabel;
    private javax.swing.ButtonGroup updateModeButtonGroup;
    private javax.swing.JProgressBar updateProgressBar;
    private javax.swing.JLabel updateProgressLabel;
    private javax.swing.JTextArea updateTextArea;
    private javax.swing.JLabel updateTypeLabel;
    // End of variables declaration//GEN-END:variables
}
